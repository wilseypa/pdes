dnl
dnl Check for pccts header (antlr and dlg) and header files needed
dnl by files generated by these tools
dnl
dnl Usage: PROG_HEADERS
dnl
AC_DEFUN([CL_PCCTS_HEADERS],
[
AC_CACHE_CHECK([for PCCTS includes], [cl_cv_path_pcctsheaders],
  [AC_ARG_WITH(pccts-headers,
    AS_HELP_STRING([--with-pccts-headers],
      [specify location of PCCTS headers (default is /usr/include/pccts)]),
    [
      case "${withval}" in
        yes)  cl_cv_path_pcctsheaders=/usr/include/pccts ;;
        no)   cl_cv_path_pcctsheaders=no ;;
        *)    cl_cv_path_pcctsheaders=$withval ;;
      esac
    ],
    [cl_cv_path_pcctsheaders=/usr/include/pccts]
  )]
)

if test $cl_cv_path_pcctsheaders = no; then
AC_MSG_ERROR(PCCTS includes required.  Please specify the location with
the --with-pccts-headers option.)
fi
AC_MSG_CHECKING(for PCCTS headers)
if test -f $cl_cv_path_pcctsheaders/AParser.cpp ; then
AC_MSG_RESULT(yes)
PCCTSROOT=$cl_cv_path_pcctsheaders
CPPFLAGS="$CPPFLAGS -I$cl_cv_path_pcctsheaders"
else
AC_MSG_RESULT(no)
AC_MSG_ERROR(Could not find PCCTS headers in $cl_cv_path_pcctsheaders.
Please specify the correct location with the --with-pccts-headers option.)
fi

]) dnl end CL_  PROG_PCCTS


dnl
dnl Check for libutils
dnl
dnl Usage: LIB_UTILS
dnl
AC_DEFUN([LIB_UTILS],
[
AC_CACHE_CHECK([for location of libutils], [cl_cv_lib_utils],
  [AC_ARG_WITH(utils,
    AS_HELP_STRING([--with-utils],
      [location of libutils (default is /usr)]),
      [
        case "${withval}" in
          yes)  cl_cv_lib_utils=/usr ;;
          no)   cl_cv_lib_utils=no ;;
          *)    cl_cv_lib_utils=$withval ;;
        esac
      ],
      [cl_cv_lib_utils=/usr]
  )]
)
if test $cl_cv_lib_utils = no ; then
AC_MSG_ERROR(The utils package is required.)
fi
if test $cl_cv_lib_utils != /usr ; then
LDFLAGS="$LDFLAGS -L$cl_cv_lib_utils/lib"
CPPFLAGS="$CPPFLAGS -I$cl_cv_lib_utils/include"
fi
AC_SEARCH_LIBS(dlopen, [dl])
AC_CHECK_LIB(utils, isUtils, ,
  AC_MSG_ERROR(Could not find a workable libutils.so or libutils.a.
    You probably need to install utils and/or specify the location of
    it with the --with-utils option.), -lltdl)
]) dnl end LIB_UTILS

dnl Check for cppunit

dnl Usage: LIB_CPPUNIT

AC_DEFUN([LIB_CPPUNIT],
[
AC_CACHE_CHECK([for location of libcppunit], [cl_cv_lib_cppunit],
  [AC_ARG_WITH(cppunit,
    AS_HELP_STRING([--with-cppunit],
      [location of libcppunit (default is /usr)]),
      [
        case "${withval}" in
          yes)  cl_cv_lib_cppunit=/usr; ;;
          no)   cl_cv_lib_cppunit=no ;;
          "")   cl_cv_lib_cppunit=no ;;
          *)    cl_cv_lib_cppunit=$withval ;;
        esac
      ],
      [cl_cv_lib_cppunit=/usr]
  )]
)

if test $cl_cv_lib_cppunit = no ; then
   Disable the build of the unit tests
  AC_MSG_ERROR("cpp_unit_disabled via --with-cppunit")
  AC_SUBST(CPP_UNIT_TEST_DIR, "")
  return;
fi

if test $cl_cv_lib_cppunit != /usr ; then
LDFLAGS="$LDFLAGS -L$cl_cv_lib_cppunit/lib"
CPPFLAGS="$CPPFLAGS -I$cl_cv_lib_cppunit/include"
fi

dnl We might want to add addition checks for CPPUNIT headers later
AC_CHECK_HEADER(cppunit/Test.h, ,
  AC_MSG_WARN(Couldn't find cppunit/TestCase.h which is optional but
    required to run the unit tests in the 'test' directory. This file is
    part of the cppunit distribution.  You probably need to install it
    and/or specify the location of it with the --with-cppunit option.))

dnl Check for the CPPUNIT library
AC_CHECK_LIB(cppunit, main, 
  [AC_SUBST(CPP_UNIT_TEST_DIR,[test]) \
        LIBS="$LIBS -lcppunit"], 
  [AC_SUBST(CPP_UNIT_TEST_DIR, "") \
  AC_MSG_WARN(Couldn't find cppunit library which is optional but
    required to run the unit tests in the 'test' directory. This file is
    part of the cppunit distribution.  You probably need to install it
    and/or specify the location of it with the --with-cppunit option.)
        ])
]) dnl end LIB_WARPED
